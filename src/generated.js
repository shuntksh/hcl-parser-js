// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { ConfigFile: peg$parseConfigFile };
  var peg$startRuleFunction = peg$parseConfigFile;

  var peg$c0 = "=";
  var peg$c1 = "{";
  var peg$c2 = "}";
  var peg$c3 = "\n";
  var peg$c4 = "\r\n";
  var peg$c5 = "//";
  var peg$c6 = "#";
  var peg$c7 = "/*";
  var peg$c8 = "*/";
  var peg$c9 = ".";
  var peg$c10 = "\"";
  var peg$c11 = "(";
  var peg$c12 = ")";
  var peg$c13 = "true";
  var peg$c14 = "false";
  var peg$c15 = "null";
  var peg$c16 = "[";
  var peg$c17 = "for";
  var peg$c18 = ",";
  var peg$c19 = "]";
  var peg$c20 = "<<";
  var peg$c21 = "-";
  var peg$c22 = "${";
  var peg$c23 = "%{";
  var peg$c24 = "~";
  var peg$c25 = "if";
  var peg$c26 = "else";
  var peg$c27 = "endif";
  var peg$c28 = "in";
  var peg$c29 = "endfor";
  var peg$c30 = "=>";
  var peg$c31 = "...";
  var peg$c32 = ":";
  var peg$c33 = "*";
  var peg$c34 = "?";
  var peg$c35 = ">=";
  var peg$c36 = "<=";
  var peg$c37 = "==";
  var peg$c38 = "!=";
  var peg$c39 = "&&";
  var peg$c40 = "||";
  var peg$c41 = "\\";
  var peg$c42 = "n";
  var peg$c43 = "r";
  var peg$c44 = "t";
  var peg$c45 = "u";
  var peg$c46 = "U";
  var peg$c47 = "$$";
  var peg$c48 = "%%";

  var peg$r0 = /^[^\n\r]/;
  var peg$r1 = /^[\-0-9A-Z_a-z\xA0-\uFFFF]/;
  var peg$r2 = /^[a-zA-Z\xA0-\uFFFF_]/;
  var peg$r3 = /^[a-zA-Z0-9\xA0-\uFFFF_]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[eE]/;
  var peg$r6 = /^[+\-]/;
  var peg$r7 = /^[:=]/;
  var peg$r8 = /^[!\-]/;
  var peg$r9 = /^[%*\/]/;
  var peg$r10 = /^[<>]/;
  var peg$r11 = /^[ \t]/;
  var peg$r12 = /^[0-9a-fA-F]/;
  var peg$r13 = /^["\\\n\r]/;
  var peg$r14 = /^["\\\n\r$%]/;

  var peg$e0 = peg$literalExpectation("=", false);
  var peg$e1 = peg$literalExpectation("{", false);
  var peg$e2 = peg$literalExpectation("}", false);
  var peg$e3 = peg$literalExpectation("\n", false);
  var peg$e4 = peg$literalExpectation("\r\n", false);
  var peg$e5 = peg$literalExpectation("//", false);
  var peg$e6 = peg$literalExpectation("#", false);
  var peg$e7 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e8 = peg$literalExpectation("/*", false);
  var peg$e9 = peg$literalExpectation("*/", false);
  var peg$e10 = peg$anyExpectation();
  var peg$e11 = peg$classExpectation(["-", ["0", "9"], ["A", "Z"], "_", ["a", "z"], ["\xA0", "\uFFFF"]], false, false);
  var peg$e12 = peg$classExpectation([["a", "z"], ["A", "Z"], ["\xA0", "\uFFFF"], "_"], false, false);
  var peg$e13 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ["\xA0", "\uFFFF"], "_"], false, false);
  var peg$e14 = peg$otherExpectation("number");
  var peg$e15 = peg$literalExpectation(".", false);
  var peg$e16 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e17 = peg$classExpectation(["e", "E"], false, false);
  var peg$e18 = peg$classExpectation(["+", "-"], false, false);
  var peg$e19 = peg$literalExpectation("\"", false);
  var peg$e20 = peg$literalExpectation("(", false);
  var peg$e21 = peg$literalExpectation(")", false);
  var peg$e22 = peg$literalExpectation("true", false);
  var peg$e23 = peg$literalExpectation("false", false);
  var peg$e24 = peg$literalExpectation("null", false);
  var peg$e25 = peg$literalExpectation("[", false);
  var peg$e26 = peg$literalExpectation("for", false);
  var peg$e27 = peg$literalExpectation(",", false);
  var peg$e28 = peg$literalExpectation("]", false);
  var peg$e29 = peg$classExpectation([":", "="], false, false);
  var peg$e30 = peg$literalExpectation("<<", false);
  var peg$e31 = peg$literalExpectation("-", false);
  var peg$e32 = peg$literalExpectation("${", false);
  var peg$e33 = peg$literalExpectation("%{", false);
  var peg$e34 = peg$literalExpectation("~", false);
  var peg$e35 = peg$literalExpectation("if", false);
  var peg$e36 = peg$literalExpectation("else", false);
  var peg$e37 = peg$literalExpectation("endif", false);
  var peg$e38 = peg$literalExpectation("in", false);
  var peg$e39 = peg$literalExpectation("endfor", false);
  var peg$e40 = peg$literalExpectation("=>", false);
  var peg$e41 = peg$literalExpectation("...", false);
  var peg$e42 = peg$literalExpectation(":", false);
  var peg$e43 = peg$literalExpectation("*", false);
  var peg$e44 = peg$literalExpectation("?", false);
  var peg$e45 = peg$classExpectation(["!", "-"], false, false);
  var peg$e46 = peg$classExpectation(["%", "*", "/"], false, false);
  var peg$e47 = peg$literalExpectation(">=", false);
  var peg$e48 = peg$literalExpectation("<=", false);
  var peg$e49 = peg$classExpectation(["<", ">"], false, false);
  var peg$e50 = peg$literalExpectation("==", false);
  var peg$e51 = peg$literalExpectation("!=", false);
  var peg$e52 = peg$literalExpectation("&&", false);
  var peg$e53 = peg$literalExpectation("||", false);
  var peg$e54 = peg$otherExpectation("whitespace");
  var peg$e55 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e56 = peg$otherExpectation("zero or more whitespace");
  var peg$e57 = peg$otherExpectation("zero or more empty lines");
  var peg$e58 = peg$otherExpectation("end of file");
  var peg$e59 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e60 = peg$literalExpectation("\\", false);
  var peg$e61 = peg$literalExpectation("n", false);
  var peg$e62 = peg$literalExpectation("r", false);
  var peg$e63 = peg$literalExpectation("t", false);
  var peg$e64 = peg$literalExpectation("u", false);
  var peg$e65 = peg$literalExpectation("U", false);
  var peg$e66 = peg$literalExpectation("$$", false);
  var peg$e67 = peg$literalExpectation("%%", false);
  var peg$e68 = peg$classExpectation(["\"", "\\", "\n", "\r"], false, false);
  var peg$e69 = peg$classExpectation(["\"", "\\", "\n", "\r", "$", "%"], false, false);

  var peg$f0 = function(bodies) { return bodies };
  var peg$f1 = function(item) {
				return item
			};
  var peg$f2 = function(items) {
				return items
			};
  var peg$f3 = function(name, value, terminator) {
      return {
        type: NodeTypes.Attribute,
        name: name,
        value: value
      }
    };
  var peg$f4 = function(type, labels, bodies, terminator) {
      return {
        type: NodeTypes.Block,
        blockType: type,
				// TODO: Hack. Taking the second element as the label as " " matches too
        labels: labels.map(l => l[1]),
        bodies: bodies
      }
    };
  var peg$f5 = function(type, labels, terminator) {
      return {
        type: NodeTypes.OneLineBlock,
        blockType: type,
				// TODO: Hack. Taking the second element as the label as " " matches too
        labels: labels.map(l => l[1]),
        body: attr
      }
    };
  var peg$f6 = function() { return null };
  var peg$f7 = function(first, rest) {
      return {type: NodeTypes.Identifier, value: first + rest.join('')}
    };
  var peg$f8 = function(integer, fraction, exponent) {
      let str = integer.join('')
      if (fraction) str += '.' + fraction[1].join('')
      if (exponent) str += exponent[0] + exponent[1].join('')
      return {type: NodeTypes.NumberLiteral, value: parseFloat(str)}
    };
  var peg$f9 = function(chars) { 
      return {type: NodeTypes.StringLiteral, value: chars.join('')}
    };
  var peg$f10 = function(term, ops) {
      return ops ? ops : term
    };
  var peg$f11 = function(expr) { return expr };
  var peg$f12 = function(head, tail) {
			// Apply postfix operators in sequence
			return tail.reduce((expr, op) => ({
				...op,
				target: expr
		}), head)
	};
  var peg$f13 = function() { return { type: NodeTypes.BooleanLiteral, value: true } };
  var peg$f14 = function() { return { type: NodeTypes.BooleanLiteral, value: false } };
  var peg$f15 = function() { return { type: NodeTypes.NullLiteral, value: null } };
  var peg$f16 = function(elements) {
		return {
			type: NodeTypes.TupleValue,
			elements: elements.flat()
		}
	};
  var peg$f17 = function(elements) {
      return {
        type: NodeTypes.ObjectValue,
        elements: elements || []
      }
    };
  var peg$f18 = function(first, rest) {
      return [first, ...rest.map(r => r[1])]
    };
  var peg$f19 = function(key, value) {
      return {
        key: key,
        value: value
      }
    };
  var peg$f20 = function(content) {
    return {
      type: NodeTypes.QuotedTemplateExpression,
      parts: content.flat()
    }
  };
  var peg$f21 = function(chars) {
      return { type: NodeTypes.TemplateLiteral, value: chars.join('') }
    };
  var peg$f22 = function(indent, marker, template) {
				return {
					type: NodeTypes.HeredocTemplateExpression,
					marker: marker,
					stripIndent: indent === "-",
					template: template
				}
			};
  var peg$f23 = function(begin) { heredocMarker = begin.value; return begin;};
  var peg$f24 = function(end) { return heredocMarker === end.value };
  var peg$f25 = function(parts) {
    return parts.flat()
  };
  var peg$f26 = function(chars) {
		return {
			type: NodeTypes.TemplateLiteral,
			value: chars.map(c => c[1]).join('')
		}
	};
  var peg$f27 = function(strip_left, expr, strip_right) {
    return {
      type: NodeTypes.TemplateInterpolation,
      expr: expr,
      strip: {
        left: strip_left !== null,
        right: strip_right !== null
      }
    }
  };
  var peg$f28 = function(strip_start, condition, strip_end, then_template, strip_else_start, strip_else_end, else_template) { return {
          template: else_template,
          strip: {
            start: strip_else_start !== null,
            end: strip_else_end !== null
          }
        }
      };
  var peg$f29 = function(strip_start, condition, strip_end, then_template, else_part, strip_endif_start, strip_endif_end) {
    return {
      type: NodeTypes.TemplateIf,
      condition: condition,
      then: then_template,
      else: else_part?.template,
      strip: {
        if: {
          start: strip_start !== null,
          end: strip_end !== null
        },
        else: else_part?.strip,
        endif: {
          start: strip_endif_start !== null,
          end: strip_endif_end !== null
        }
      }
    }
  };
  var peg$f30 = function(strip_start, key, value, collection, strip_end, body, strip_endfor_start, strip_endfor_end) {
    return {
      type: NodeTypes.TemplateFor,
      intro: {
        key: key,
        value: value ? value[2] : null,
        collection: collection
      },
      body: body,
      strip: {
        for: {
          start: strip_start !== null,
          end: strip_end !== null
        },
        endfor: {
          start: strip_endfor_start !== null,
          end: strip_endfor_end !== null
        }
      }
    }
  };
  var peg$f31 = function(name, args) {
    return {
      type: NodeTypes.FunctionCallExpression,
      name: name,
      args: args // List of Expressions
    }
  };
  var peg$f32 = function(name) {
    return {
      type: NodeTypes.VariableExpression,
      name: name
    }
  };
  var peg$f33 = function(intro, expr, cond) {
    return {
      type: NodeTypes.ForExpression,
      kind: ForKinds.Tuple,
      intro: intro,
      expr: expr,
      condition: cond
    }
  };
  var peg$f34 = function(intro, key, value, ellipsis, cond) {
    return {
      type: NodeTypes.ForExpression,
      kind: ForKinds.Object,
      intro: intro,
      key: key,
      value: value,
      grouping: ellipsis !== null,
      condition: cond
    }
  };
  var peg$f35 = function(key, value, collection) {
    return {
      iterator: key,
      value: value ? value[2] : null,
      collection: collection
    }
  };
  var peg$f36 = function(expr) {
    return expr
  };
  var peg$f37 = function(expr) {
    return {
      type: NodeTypes.IndexOperator,
      key: expr
    }
  };
  var peg$f38 = function(digits) {
    return {
      type: NodeTypes.LegacyIndexOperator,
      key: { type: NodeTypes.NumberLiteral, value: parseInt(digits, 10) }
    }
  };
  var peg$f39 = function(name) {
    return {
      type: NodeTypes.GetAttributeOperator,
      name: name
    }
  };
  var peg$f40 = function(attrs) {
    return {
      type: NodeTypes.SplatOperator,
      kind: SplatKinds.Attribute,
      attrs: attrs
    }
  };
  var peg$f41 = function(ops) {
    return {
      type: NodeTypes.SplatOperator,
      kind: SplatKinds.Full, 
      ops: ops
    }
	};
  var peg$f42 = function(predicate, trueExpr, falseExpr) {
    return {
      type: NodeTypes.ConditionalOperator,
      predicate: predicate,
      trueExpr: trueExpr,
      falseExpr: falseExpr
    }
  };
  var peg$f43 = function(op, term) {
    return {
      type: NodeTypes.UnaryOperator,
      operator: op,
      term: term
    }
  };
  var peg$f44 = function(left, op, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: op,
      left: left,
      right: right
    }
  };
  var peg$f45 = function(left, op, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: op,
      left: left,
      right: right
    }
  };
  var peg$f46 = function(left, op, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: op,
      left: left,
      right: right
    }
  };
  var peg$f47 = function(left, op, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: op,
      left: left,
      right: right
    }
  };
  var peg$f48 = function(left, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: "&&",
      left: left,
      right: right
    }
  };
  var peg$f49 = function(left, right) {
    return {
      type: NodeTypes.BinaryOperator,
      operator: "||",
      left: left,
      right: right
    }
  };
  var peg$f50 = function() { return "\n" };
  var peg$f51 = function() { return "\r" };
  var peg$f52 = function() { return "\t" };
  var peg$f53 = function() { return '"' };
  var peg$f54 = function() { return "\\" };
  var peg$f55 = function(digits) {
        return String.fromCharCode(parseInt(digits, 16))
      };
  var peg$f56 = function(digits) {
        return String.fromCodePoint(parseInt(digits, 16))
      };
  var peg$f57 = function(sequence) { return sequence };
  var peg$f58 = function() { return "$" };
  var peg$f59 = function() { return "%" };
  var peg$f60 = function() { return text() };
  var peg$f61 = function() { return text() };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseConfigFile() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseBodies();
    s3 = peg$parse__();
    peg$savedPos = s0;
    s0 = peg$f0(s2);

    return s0;
  }

  function peg$parseBodies() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parse__();
    s5 = peg$parseBodyElement();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse__();
      peg$savedPos = s3;
      s3 = peg$f1(s5);
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseBodyElement();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse__();
        peg$savedPos = s3;
        s3 = peg$f1(s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f2(s2);

    return s0;
  }

  function peg$parseBodyElement() {
    var s0;

    s0 = peg$parseAttribute();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBlock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOneLineBlock();
      }
    }

    return s0;
  }

  function peg$parseAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseNewLine();
          if (s8 === peg$FAILED) {
            s8 = peg$parse__eof();
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s2, s6, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseStringLit();
      if (s7 === peg$FAILED) {
        s7 = peg$parseIdentifier();
      }
      if (s7 !== peg$FAILED) {
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseStringLit();
        if (s7 === peg$FAILED) {
          s7 = peg$parseIdentifier();
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseNewLine();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseBodies();
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          s11 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s12 = peg$c2;
            peg$currPos++;
          } else {
            s12 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = peg$parseNewLine();
            if (s14 === peg$FAILED) {
              s14 = peg$parse__eof();
            }
            if (s14 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f4(s2, s4, s10, s14);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOneLineBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseStringLit();
      if (s7 === peg$FAILED) {
        s7 = peg$parseIdentifier();
      }
      if (s7 !== peg$FAILED) {
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseStringLit();
        if (s7 === peg$FAILED) {
          s7 = peg$parseIdentifier();
        }
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$currPos;
        s9 = peg$parseIdentifier();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s11 = peg$c0;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parseExpression();
            if (s13 !== peg$FAILED) {
              s9 = [s9, s10, s11, s12, s13];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s10 = peg$c2;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          s12 = peg$parseNewLine();
          if (s12 === peg$FAILED) {
            s12 = peg$parse__eof();
          }
          if (s12 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f5(s2, s4, s12);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNewLine() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLineComment();
      }
    }

    return s0;
  }

  function peg$parseLineComment() {
    var s0, s1, s2, s3;

    if (input.substr(peg$currPos, 2) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r0.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
        }
        s3 = peg$parseNewLine();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseInlineComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s5 = peg$c8;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c8) {
          s5 = peg$c8;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s3 = peg$c8;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_id_start();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_id_start() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parse_id_continue() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseNumericLit() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_decimal();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_decimal();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_decimal();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_decimal();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parse_expmark();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_decimal();
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_decimal();
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f8(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parse_decimal() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parse_expmark() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r6.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringLit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_char();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_char();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseConditionalOp();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f10(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_expr_term() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseTemplateExpr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseLiteralValue();
      if (s1 === peg$FAILED) {
        s1 = peg$parseFunctionCall();
        if (s1 === peg$FAILED) {
          s1 = peg$parseCollectionValue();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVariableExpr();
            if (s1 === peg$FAILED) {
              s1 = peg$parseForExpr();
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s2 = peg$c11;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e20); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$parseExpression();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c12;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e21); }
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s1 = peg$f11(s4);
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIndex();
      if (s3 === peg$FAILED) {
        s3 = peg$parseGetAttr();
        if (s3 === peg$FAILED) {
          s3 = peg$parseSplat();
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseIndex();
        if (s3 === peg$FAILED) {
          s3 = peg$parseGetAttr();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSplat();
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralValue() {
    var s0;

    s0 = peg$parseNumericLit();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTrueLit();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFalseLit();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNullLit();
        }
      }
    }

    return s0;
  }

  function peg$parseTrueLit() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalseLit() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNullLit() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCollectionValue() {
    var s0;

    s0 = peg$parse_tuple();
    if (s0 === peg$FAILED) {
      s0 = peg$parse_object();
    }

    return s0;
  }

  function peg$parse_tuple() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c17) {
        s5 = peg$c17;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseExpression();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s9 === peg$FAILED) {
            s9 = peg$parseNewLine();
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 === peg$FAILED) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
          } else {
            s6 = s7;
          }
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 93) {
          s7 = peg$c19;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f16(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_object() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c1;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c17) {
        s5 = peg$c17;
        peg$currPos += 3;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_object_content();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c2;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f17(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_object_content() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_objectelem();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parse_objectelem();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parse_objectelem();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f18(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_objectelem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseIdentifier();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = input.charAt(peg$currPos);
      if (peg$r7.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = peg$parseNewLine();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateExpr() {
    var s0;

    s0 = peg$parseQuotedTemplate();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHeredocTemplate();
    }

    return s0;
  }

  function peg$parseQuotedTemplate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseQuotedTemplateContent();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseQuotedTemplateContent();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedTemplateContent() {
    var s0, s1, s2;

    s0 = peg$parseTemplateInterpolation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTemplateDirective();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_template_char();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_template_char();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f21(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseHeredocTemplate() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c20) {
      s2 = peg$c20;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s3 === peg$FAILED) {
        s3 = '';
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_beginMarker();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseNewLine();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseTemplate();
            s9 = peg$parse_endMarker();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f22(s3, s5, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_beginMarker() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_endMarker() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNewLine();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseIdentifier();
    if (s3 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s4 = peg$f24(s3);
      if (s4) {
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplate() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTemplateLiteral();
    if (s2 === peg$FAILED) {
      s2 = peg$parseTemplateInterpolation();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTemplateDirective();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseTemplateLiteral();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTemplateInterpolation();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTemplateDirective();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f25(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseTemplateLiteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c22) {
      s4 = peg$c22;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s4 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c23) {
        s4 = peg$c23;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parse_endMarker();
      }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s4 = peg$c23;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parse_endMarker();
          }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTemplateInterpolation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c24;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parseExpression();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 126) {
          s6 = peg$c24;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c2;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateDirective() {
    var s0;

    s0 = peg$parseTemplateIf();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTemplateFor();
    }

    return s0;
  }

  function peg$parseTemplateIf() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c24;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s4 = peg$c25;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 126) {
            s8 = peg$c24;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          if (input.charCodeAt(peg$currPos) === 125) {
            s9 = peg$c2;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parseTemplate();
            s11 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s12 = peg$c23;
              peg$currPos += 2;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s12 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s13 = peg$c24;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e34); }
              }
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c26) {
                s15 = peg$c26;
                peg$currPos += 4;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e36); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 126) {
                  s17 = peg$c24;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
                if (s17 === peg$FAILED) {
                  s17 = null;
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s18 = peg$c2;
                  peg$currPos++;
                } else {
                  s18 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
                if (s18 !== peg$FAILED) {
                  s19 = peg$parseTemplate();
                  peg$savedPos = s11;
                  s11 = peg$f28(s2, s6, s8, s10, s13, s17, s19);
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s12 = peg$c23;
              peg$currPos += 2;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s12 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s13 = peg$c24;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e34); }
              }
              if (s13 === peg$FAILED) {
                s13 = null;
              }
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 5) === peg$c27) {
                s15 = peg$c27;
                peg$currPos += 5;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e37); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 126) {
                  s17 = peg$c24;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
                if (s17 === peg$FAILED) {
                  s17 = null;
                }
                if (input.charCodeAt(peg$currPos) === 125) {
                  s18 = peg$c2;
                  peg$currPos++;
                } else {
                  s18 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e2); }
                }
                if (s18 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f29(s2, s6, s8, s10, s11, s13, s17);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateFor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c24;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c17) {
        s4 = peg$c17;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseIdentifier();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c18;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseIdentifier();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c28) {
            s10 = peg$c28;
            peg$currPos += 2;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseExpression();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 126) {
                s14 = peg$c24;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e34); }
              }
              if (s14 === peg$FAILED) {
                s14 = null;
              }
              if (input.charCodeAt(peg$currPos) === 125) {
                s15 = peg$c2;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parseTemplate();
                if (input.substr(peg$currPos, 2) === peg$c23) {
                  s17 = peg$c23;
                  peg$currPos += 2;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
                if (s17 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 126) {
                    s18 = peg$c24;
                    peg$currPos++;
                  } else {
                    s18 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e34); }
                  }
                  if (s18 === peg$FAILED) {
                    s18 = null;
                  }
                  s19 = peg$parse_();
                  if (input.substr(peg$currPos, 6) === peg$c29) {
                    s20 = peg$c29;
                    peg$currPos += 6;
                  } else {
                    s20 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                  }
                  if (s20 !== peg$FAILED) {
                    s21 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 126) {
                      s22 = peg$c24;
                      peg$currPos++;
                    } else {
                      s22 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e34); }
                    }
                    if (s22 === peg$FAILED) {
                      s22 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s23 = peg$c2;
                      peg$currPos++;
                    } else {
                      s23 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e2); }
                    }
                    if (s23 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f30(s2, s6, s8, s12, s14, s16, s18, s22);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parse_function_args();
        s6 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 41) {
          s7 = peg$c12;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f31(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_function_args() {
    var s0;

    s0 = peg$parse_();

    return s0;
  }

  function peg$parseVariableExpr() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseForExpr() {
    var s0;

    s0 = peg$parseForTupleExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseForObjectExpr();
    }

    return s0;
  }

  function peg$parseForTupleExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parse_for_intro();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parse_for_cond();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s9 = peg$c19;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f33(s3, s5, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForObjectExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parse_for_intro();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c30) {
            s7 = peg$c30;
            peg$currPos += 2;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseExpression();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parse_();
              if (input.substr(peg$currPos, 3) === peg$c31) {
                s12 = peg$c31;
                peg$currPos += 3;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e41); }
              }
              if (s12 !== peg$FAILED) {
                s11 = [s11, s12];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parse_();
              s12 = peg$parse_for_cond();
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s14 = peg$c2;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s14 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f34(s3, s5, s9, s10, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_for_intro() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseIdentifier();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c28) {
          s7 = peg$c28;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseExpression();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 58) {
              s11 = peg$c32;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s3, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_for_cond() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f36(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndex() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseExpression();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c19;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f37(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLegacyIndex();
    }

    return s0;
  }

  function peg$parseLegacyIndex() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r4.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r4.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGetAttr() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseIdentifier();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSplat() {
    var s0;

    s0 = peg$parseAttrSplat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFullSplat();
    }

    return s0;
  }

  function peg$parseAttrSplat() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c9;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c33;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseGetAttr();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseGetAttr();
        }
        peg$savedPos = s0;
        s0 = peg$f40(s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFullSplat() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c33;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c19;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseGetAttr();
          if (s8 === peg$FAILED) {
            s8 = peg$parseIndex();
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseGetAttr();
            if (s8 === peg$FAILED) {
              s8 = peg$parseIndex();
            }
          }
          peg$savedPos = s0;
          s0 = peg$f41(s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalOp() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseExpression();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 63) {
        s4 = peg$c34;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s8 = peg$c32;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseExpression();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f42(s2, s6, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseOperation();
    }

    return s0;
  }

  function peg$parseOperation() {
    var s0;

    s0 = peg$parseUnaryOp();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMultiplicativeExpr();
    }

    return s0;
  }

  function peg$parseUnaryOp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.charAt(peg$currPos);
    if (peg$r8.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parse_expr_term();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiplicativeExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAdditiveExpr();
    }

    return s0;
  }

  function peg$parseAdditiveExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseComparisonExpr();
    }

    return s0;
  }

  function peg$parseComparisonExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s3 = peg$c35;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c36) {
          s3 = peg$c36;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r10.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseEqualityExpr();
    }

    return s0;
  }

  function peg$parseEqualityExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c37) {
        s3 = peg$c37;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c38) {
          s3 = peg$c38;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f47(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalAndExpr();
    }

    return s0;
  }

  function peg$parseLogicalAndExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c39) {
        s3 = peg$c39;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f48(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalOrExpr();
    }

    return s0;
  }

  function peg$parseLogicalOrExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_expr_term();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c40) {
        s3 = peg$c40;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parse_expr_term();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f49(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parse_expr_term();
    }

    return s0;
  }

  function peg$parse_ws() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r11.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseInlineComment();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parse_ws();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parse_ws();
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e56); }

    return s0;
  }

  function peg$parse__() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parse_ws();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$parse_ws();
    }
    s4 = peg$parseNewLine();
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parse_ws();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_ws();
      }
      s4 = peg$parseNewLine();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = [];
    s3 = peg$parse_ws();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parse_ws();
    }
    s1 = [s1, s2];
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e57); }

    return s0;
  }

  function peg$parse__eof() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parse_hex() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parse_escape_seq() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 110) {
        s3 = peg$c42;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f50();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 114) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f51();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 116) {
            s3 = peg$c44;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f52();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c10;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$f53();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s3 = peg$c41;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e60); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f54();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 117) {
                  s3 = peg$c45;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e64); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  s6 = peg$parse_hex();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_hex();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_hex();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_hex();
                        if (s9 !== peg$FAILED) {
                          s6 = [s6, s7, s8, s9];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = input.substring(s4, peg$currPos);
                  } else {
                    s4 = s5;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s2 = peg$f55(s4);
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 85) {
                    s3 = peg$c46;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$currPos;
                    s6 = peg$parse_hex();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_hex();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_hex();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_hex();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_hex();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_hex();
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse_hex();
                                if (s12 !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9, s10, s11, s12];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s2 = peg$f56(s4);
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f57(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_template_escape() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f58();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f59();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_char() {
    var s0, s1, s2;

    s0 = peg$parse_escape_seq();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = input.charAt(peg$currPos);
      if (peg$r13.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f60();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parse_template_char() {
    var s0, s1, s2;

    s0 = peg$parse_escape_seq();
    if (s0 === peg$FAILED) {
      s0 = peg$parse_template_escape();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = input.charAt(peg$currPos);
        if (peg$r14.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = undefined;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f61();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }


	// Used to match the closing marker of a heredoc
	let heredocMarker = null;

	// Node types
	const NodeTypes = {
		AdditiveOperator: "AdditiveOperator",
		Attribute: "Attribute",
		BinaryOperator: "BinaryOperator",
		Block: "Block",
		BooleanLiteral: "BooleanLiteral",
		CollectionValue: "CollectionValue",
		ComparisonOperator: "ComparisonOperator",
		ConditionalOperator: "ConditionalOperator",
		EqualityOperator: "EqualityOperator",
		Expression: "Expression",
		ForExpression: "ForExpression",
		ForObjectExpression: "ForObjectExpression",
		ForTupleExpression: "ForTupleExpression",
		FunctionCallExpression: "FunctionCallExpression",
		GetAttributeOperator: "GetAttributeOperator",
		HeredocTemplateExpression: "HeredocTemplateExpression",
		Identifier: "Identifier",
		IndexOperator: "IndexOperator",
		Label: "Label",
		LegacyIndexOperator: "LegacyIndexOperator",
		LogicalOperator: "LogicalOperator",
		MultiplicativeOperator: "MultiplicativeOperator",
		NullLiteral: "NullLiteral",
		NumberLiteral: "NumberLiteral",
		ObjectValue: "ObjectValue",
		ObjectValueElement: "ObjectValueElement",
		OneLineBlock: "OneLineBlock",
		QuotedTemplateContent: "QuotedTemplateContent",
		QuotedTemplateExpression: "QuotedTemplateExpression",
		SplatOperator: "SplatOperator",
		StringLiteral: "StringLiteral",
		Template: "Template",
		TemplateDirective: "TemplateDirective",
		TemplateExpression: "TemplateExpression",
		TemplateFor: "TemplateFor",
		TemplateIf: "TemplateIf",
		TemplateInterpolation: "TemplateInterpolation",
		TemplateLiteral: "TemplateLiteral",
		TupleValue: "TupleValue",
		UnaryOperator: "UnaryOperator",
		VariableExpression: "VariableExpression",
	} 

	const ForKinds = {
		Tuple: "tuple",
		Object: "object",
	}

	const SplatKinds = {
		Attribute: "Attribute",
		Full: "Full",
	}

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "ConfigFile"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
